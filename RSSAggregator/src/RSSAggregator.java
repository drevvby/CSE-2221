import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Andrew White
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputMainHeader(XMLTree main, SimpleWriter out) {
        String title = main.attributeValue("title");

        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println(title);
        out.println("</head>");
        out.println("<body>");
        out.println("<ul>");

        for (int i = 0; i < main.numberOfChildren(); i++) {
            if (main.child(i).label().equals("feed")) {
                processFeed(main.child(i).attributeValue("url"),
                        main.child(i).attributeValue("file"), out);
                out.println("<li><a href=\""
                        + main.child(i).attributeValue("url") + "\">"
                        + main.child(i).attributeValue("name") + "</a></li>");
            }
        }
        out.println("</ul>");
        out.println("</body>");
        out.println("</html>");
    }

    private static void processFeed(String url, String file, SimpleWriter out) {

        XMLTree feed = new XMLTree1(url);
        SimpleWriter outputFile = new SimpleWriter1L(file);

        outputHeader(feed.child(0), outputFile);
        outputFooter(outputFile);
    }

    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String headerTitle = "No title given.";
        String headerLink = "";
        int titleIndex = getChildElement(channel, "title");

        if (titleIndex >= 0) {
            headerTitle = channel.child(titleIndex).child(0).label();
            headerLink = channel.child(getChildElement(channel, "link"))
                    .child(0).label();
        }

        String itemDescription = "No description given";
        int descriptionIndex = getChildElement(channel, "description");

        if (descriptionIndex >= 0) {
            itemDescription = channel.child(descriptionIndex).child(0).label();
        }

        out.println("<html>");
        out.print("<head>");
        out.print("<title>" + headerTitle + "</title>");
        out.print("</head>");
        out.print("<body>");
        out.print(
                "<h1><a href=\""
                        + channel.child(getChildElement(channel, "link"))
                                .child(0).label()
                        + "\">" + headerTitle + "</a></h1>");
        out.print("<p>" + itemDescription + "</p>");
        out.print("<table border = \"1\">");
        out.print("<tr>");
        out.print("<th>Date</th>");
        out.print("<th>Source</th>");
        out.print("<th>News<th>");
        out.print("</tr>");

        int i = 0;
        while (i < channel.numberOfChildren()) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), out);
            }
            i++;
        }
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int numChildren = xml.numberOfChildren();

        int i = 0;

        int index = 0;

        String childName = xml.child(0).label();

        while (!childName.equals(tag) && i < numChildren) {
            childName = xml.child(i).label();

            if (childName.equals(tag)) {
                index = i;
            }

            i++;
        }

        if (childName.equals(tag)) {
            return index;
        } else {
            return -1;
        }
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.print("<tr>");

        String pubDate = "No date given.";
        if (getChildElement(item, "pubDate") >= 0) {
            pubDate = item.child(getChildElement(item, "pubDate")).child(0)
                    .label();
        }
        out.println("<th>" + pubDate + "<th>");

        String source = "No source given.";
        String sourceLink = "";
        int check = -100;
        for (int i = 0; i < item.numberOfChildren(); i++) {
            if (item.child(i).label().equals("source")) {
                source = item.child(i).child(0).label();
                sourceLink = item.child(i).attributeValue("url");
                out.println("<td><a href=\"" + sourceLink + "\">" + source
                        + "</td>");
                check = 0;
            }
        }
        if (check < 0) {
            out.println("<th>" + source + "</th>");
        }

        String title = "No title available.";
        if (getChildElement(item, "title") < 0) {
            if (getChildElement(item, "description") >= 0) {
                title = item.child(getChildElement(item, "description"))
                        .child(0).label();
            }
        } else {
            title = item.child(getChildElement(item, "title")).child(0).label();
        }

        String titleLink = "";
        int titleLinkIndex = getChildElement(item, "link");

        if (titleLinkIndex >= 0) {
            titleLink = item.child(titleLinkIndex).child(0).label();
        }

        out.println("<th><a href=\"" + titleLink + "\">" + title + "</th>");
        out.print("</tr>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter an XMl file with multiple RSS feeds: ");
        String url = in.nextLine();
        XMLTree xml = new XMLTree1(url);
        out.print(
                "Enter the name of an output file, including the .html extension: ");
        String output = in.nextLine();

        SimpleWriter outputToFile = new SimpleWriter1L(output);

        outputMainHeader(xml, out);

        in.close();
        out.close();
    }

}